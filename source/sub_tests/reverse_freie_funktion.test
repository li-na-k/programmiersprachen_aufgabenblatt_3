TEST_CASE("bekommt Liste als Argument und gibt neue Liste mit umgekehrter Reihenfolge zurück", "[reverse - Freie Funktion]"){
    List<int> list{};
    list.push_back(1);
    list.push_back(2);
    list.push_back(3);
    List<int> list1 = reverse(list);

    REQUIRE(list1.front() == 3);
    REQUIRE(list1.back() == 1);
    REQUIRE(list1.size() == 3);

    //Vorlage-Liste soll unverändert bleiben
    REQUIRE(list.front() == 1);
    REQUIRE(list.back() == 3);
    REQUIRE(list.size() == 3);


    //Test 2
    List<int> list2{};
    list2.push_back(4);
    list2.push_back(5);
    list2.push_back(6);
    List<int> list3 = reverse(list2);

    REQUIRE(list3.front() == 6);
    REQUIRE(list3.back() == 4);
    REQUIRE(list3.size() == 3);

    REQUIRE(list2.front() == 4);
    REQUIRE(list2.back() == 6);
    REQUIRE(list2.size() == 3);

    //Test 3 - List with only one element
    List<int> list4{};
    list4.push_back(99);
    List<int> list5 = reverse(list4);

    REQUIRE(list5.front() == 99);
    REQUIRE(list5.back() == 99);
    REQUIRE(list5.size() == 1);

    //Test 4 - Reverse twice
    List<int> list6{};
    list6.push_back(13);
    list6.push_back(56);
    list6.push_back(3);
    list6.push_back(1);
    list6.push_back(76);
    List<int> list7 = reverse(list6);
    List<int> list8 = reverse(list7);
    REQUIRE(list8.size() == 5);
    REQUIRE(list8.front() == 13);
    REQUIRE(list8.back() == 76);
}